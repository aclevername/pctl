// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/weaveworks/pctl/pkg/upgrade/branch"
)

type FakeBranchManager struct {
	CreateBranchWithContentFromBaseStub        func(string, func() error) error
	createBranchWithContentFromBaseMutex       sync.RWMutex
	createBranchWithContentFromBaseArgsForCall []struct {
		arg1 string
		arg2 func() error
	}
	createBranchWithContentFromBaseReturns struct {
		result1 error
	}
	createBranchWithContentFromBaseReturnsOnCall map[int]struct {
		result1 error
	}
	CreateRepoWithContentStub        func(func() error) error
	createRepoWithContentMutex       sync.RWMutex
	createRepoWithContentArgsForCall []struct {
		arg1 func() error
	}
	createRepoWithContentReturns struct {
		result1 error
	}
	createRepoWithContentReturnsOnCall map[int]struct {
		result1 error
	}
	MergeBranchesStub        func(string, string) (bool, error)
	mergeBranchesMutex       sync.RWMutex
	mergeBranchesArgsForCall []struct {
		arg1 string
		arg2 string
	}
	mergeBranchesReturns struct {
		result1 bool
		result2 error
	}
	mergeBranchesReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBranchManager) CreateBranchWithContentFromBase(arg1 string, arg2 func() error) error {
	fake.createBranchWithContentFromBaseMutex.Lock()
	ret, specificReturn := fake.createBranchWithContentFromBaseReturnsOnCall[len(fake.createBranchWithContentFromBaseArgsForCall)]
	fake.createBranchWithContentFromBaseArgsForCall = append(fake.createBranchWithContentFromBaseArgsForCall, struct {
		arg1 string
		arg2 func() error
	}{arg1, arg2})
	stub := fake.CreateBranchWithContentFromBaseStub
	fakeReturns := fake.createBranchWithContentFromBaseReturns
	fake.recordInvocation("CreateBranchWithContentFromBase", []interface{}{arg1, arg2})
	fake.createBranchWithContentFromBaseMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBranchManager) CreateBranchWithContentFromBaseCallCount() int {
	fake.createBranchWithContentFromBaseMutex.RLock()
	defer fake.createBranchWithContentFromBaseMutex.RUnlock()
	return len(fake.createBranchWithContentFromBaseArgsForCall)
}

func (fake *FakeBranchManager) CreateBranchWithContentFromBaseCalls(stub func(string, func() error) error) {
	fake.createBranchWithContentFromBaseMutex.Lock()
	defer fake.createBranchWithContentFromBaseMutex.Unlock()
	fake.CreateBranchWithContentFromBaseStub = stub
}

func (fake *FakeBranchManager) CreateBranchWithContentFromBaseArgsForCall(i int) (string, func() error) {
	fake.createBranchWithContentFromBaseMutex.RLock()
	defer fake.createBranchWithContentFromBaseMutex.RUnlock()
	argsForCall := fake.createBranchWithContentFromBaseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBranchManager) CreateBranchWithContentFromBaseReturns(result1 error) {
	fake.createBranchWithContentFromBaseMutex.Lock()
	defer fake.createBranchWithContentFromBaseMutex.Unlock()
	fake.CreateBranchWithContentFromBaseStub = nil
	fake.createBranchWithContentFromBaseReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBranchManager) CreateBranchWithContentFromBaseReturnsOnCall(i int, result1 error) {
	fake.createBranchWithContentFromBaseMutex.Lock()
	defer fake.createBranchWithContentFromBaseMutex.Unlock()
	fake.CreateBranchWithContentFromBaseStub = nil
	if fake.createBranchWithContentFromBaseReturnsOnCall == nil {
		fake.createBranchWithContentFromBaseReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createBranchWithContentFromBaseReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBranchManager) CreateRepoWithContent(arg1 func() error) error {
	fake.createRepoWithContentMutex.Lock()
	ret, specificReturn := fake.createRepoWithContentReturnsOnCall[len(fake.createRepoWithContentArgsForCall)]
	fake.createRepoWithContentArgsForCall = append(fake.createRepoWithContentArgsForCall, struct {
		arg1 func() error
	}{arg1})
	stub := fake.CreateRepoWithContentStub
	fakeReturns := fake.createRepoWithContentReturns
	fake.recordInvocation("CreateRepoWithContent", []interface{}{arg1})
	fake.createRepoWithContentMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBranchManager) CreateRepoWithContentCallCount() int {
	fake.createRepoWithContentMutex.RLock()
	defer fake.createRepoWithContentMutex.RUnlock()
	return len(fake.createRepoWithContentArgsForCall)
}

func (fake *FakeBranchManager) CreateRepoWithContentCalls(stub func(func() error) error) {
	fake.createRepoWithContentMutex.Lock()
	defer fake.createRepoWithContentMutex.Unlock()
	fake.CreateRepoWithContentStub = stub
}

func (fake *FakeBranchManager) CreateRepoWithContentArgsForCall(i int) func() error {
	fake.createRepoWithContentMutex.RLock()
	defer fake.createRepoWithContentMutex.RUnlock()
	argsForCall := fake.createRepoWithContentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBranchManager) CreateRepoWithContentReturns(result1 error) {
	fake.createRepoWithContentMutex.Lock()
	defer fake.createRepoWithContentMutex.Unlock()
	fake.CreateRepoWithContentStub = nil
	fake.createRepoWithContentReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBranchManager) CreateRepoWithContentReturnsOnCall(i int, result1 error) {
	fake.createRepoWithContentMutex.Lock()
	defer fake.createRepoWithContentMutex.Unlock()
	fake.CreateRepoWithContentStub = nil
	if fake.createRepoWithContentReturnsOnCall == nil {
		fake.createRepoWithContentReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createRepoWithContentReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBranchManager) MergeBranches(arg1 string, arg2 string) (bool, error) {
	fake.mergeBranchesMutex.Lock()
	ret, specificReturn := fake.mergeBranchesReturnsOnCall[len(fake.mergeBranchesArgsForCall)]
	fake.mergeBranchesArgsForCall = append(fake.mergeBranchesArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.MergeBranchesStub
	fakeReturns := fake.mergeBranchesReturns
	fake.recordInvocation("MergeBranches", []interface{}{arg1, arg2})
	fake.mergeBranchesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBranchManager) MergeBranchesCallCount() int {
	fake.mergeBranchesMutex.RLock()
	defer fake.mergeBranchesMutex.RUnlock()
	return len(fake.mergeBranchesArgsForCall)
}

func (fake *FakeBranchManager) MergeBranchesCalls(stub func(string, string) (bool, error)) {
	fake.mergeBranchesMutex.Lock()
	defer fake.mergeBranchesMutex.Unlock()
	fake.MergeBranchesStub = stub
}

func (fake *FakeBranchManager) MergeBranchesArgsForCall(i int) (string, string) {
	fake.mergeBranchesMutex.RLock()
	defer fake.mergeBranchesMutex.RUnlock()
	argsForCall := fake.mergeBranchesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBranchManager) MergeBranchesReturns(result1 bool, result2 error) {
	fake.mergeBranchesMutex.Lock()
	defer fake.mergeBranchesMutex.Unlock()
	fake.MergeBranchesStub = nil
	fake.mergeBranchesReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeBranchManager) MergeBranchesReturnsOnCall(i int, result1 bool, result2 error) {
	fake.mergeBranchesMutex.Lock()
	defer fake.mergeBranchesMutex.Unlock()
	fake.MergeBranchesStub = nil
	if fake.mergeBranchesReturnsOnCall == nil {
		fake.mergeBranchesReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.mergeBranchesReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeBranchManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createBranchWithContentFromBaseMutex.RLock()
	defer fake.createBranchWithContentFromBaseMutex.RUnlock()
	fake.createRepoWithContentMutex.RLock()
	defer fake.createRepoWithContentMutex.RUnlock()
	fake.mergeBranchesMutex.RLock()
	defer fake.mergeBranchesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBranchManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ branch.BranchManager = new(FakeBranchManager)
